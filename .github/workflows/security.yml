name: Advanced Automated Commit Workflow

on:
  schedule:
    - cron: '0 */4 * * *'  # Runs every 4 hours
    - cron: '30 */6 * * *' # Additional scheduled run
  workflow_dispatch:
    inputs:
      force_commit:
        description: 'Force commit even without changes'
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  dynamic-content-generation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests faker

      - name: Prepare Commits Folder
        run: |
          mkdir -p commits
          chmod 755 commits

      - name: Generate Dynamic Content
        run: |
          python << EOF
          import json
          import os
          from datetime import datetime
          from faker import Faker

          fake = Faker()

          # Generate multiple types of content
          content_types = [
              'technical_report',
              'personal_note',
              'project_log',
              'research_summary',
              'random_thoughts'
          ]

          for content_type in content_types:
              filename = f"commits/{content_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
              
              if content_type == 'technical_report':
                  content = f"""Technical Report: {fake.catch_phrase()}
          Date: {datetime.now()}
          Project: {fake.bs()}
          
          Key Findings:
          1. {fake.sentence()}
          2. {fake.sentence()}
          3. {fake.sentence()}
          
          Observations:
          {fake.paragraph()}
          
          Recommendations:
          - {fake.bs()}
          - {fake.bs()}
          """
              elif content_type == 'personal_note':
                  content = f"""Personal Note
          Date: {datetime.now()}
          Author: Anonymous
          
          {fake.paragraph(3)}
          
          Thoughts and Reflections:
          {fake.paragraph()}
          """
              elif content_type == 'project_log':
                  content = f"""Project Workflow Log
          Timestamp: {datetime.now()}
          Status: Active Development
          
          Progress Tracking:
          - Current Phase: {fake.bs()}
          - Completed Tasks: {fake.sentence()}
          - Pending Items: {fake.sentence()}
          
          Notes:
          {fake.paragraph(2)}
          """
              elif content_type == 'research_summary':
                  content = f"""Research Summary
          Topic: {fake.catch_phrase()}
          Date: {datetime.now()}
          
          Abstract:
          {fake.paragraph()}
          
          Key Methodologies:
          1. {fake.sentence()}
          2. {fake.sentence()}
          
          Preliminary Findings:
          {fake.paragraph()}
          """
              else:  # random_thoughts
                  content = f"""Random Thoughts Journal
          Date: {datetime.now()}
          
          Stream of Consciousness:
          {fake.paragraph(3)}
          
          Spontaneous Ideas:
          - {fake.bs()}
          - {fake.bs()}
          - {fake.sentence()}
          """
              
              # Write to file
              with open(filename, 'w') as f:
                  f.write(content)
              
              print(f"Generated {filename}")
          EOF

      - name: Check for Changes
        id: check_changes
        run: |
          changes=$(git status --porcelain commits/ | wc -l)
          echo "changes_count=$changes" >> $GITHUB_OUTPUT
          echo "Detected $changes changes in commits folder"

      - name: Prepare Commit Branch
        if: steps.check_changes.outputs.changes_count > 0 || github.event.inputs.force_commit == 'true'
        run: |
          timestamp=$(date +"%Y%m%d-%H%M%S")
          branch_name="auto-commits-${timestamp}"
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git checkout -b $branch_name
          git add commits/
          
          commit_message="Auto-generated content: $(date +"%Y-%m-%d %H:%M:%S")"
          git commit -m "$commit_message" || echo "No changes to commit"
          git push -u origin $branch_name

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes_count > 0 || github.event.inputs.force_commit == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --title "Auto-Generated Content Update" \
            --body "Automated content generation in commits/ folder

            - Generated multiple dynamic content files
            - Timestamp: $(date +"%Y-%m-%d %H:%M:%S")
            - Total new files: ${{ steps.check_changes.outputs.changes_count }}"

  security-scan:
    needs: dynamic-content-generation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Basic Security Checks
        run: |
          echo "Performing basic security scans"
          # Add your custom security checks here
          find commits/ -type f -print0 | xargs -0 grep -L "SENSITIVE"

  cleanup:
    needs: [dynamic-content-generation, security-scan]
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup Old Branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete branches older than 7 days
          gh pr list --state merged --json headRefName --jq '.[].headRefName' | \
          while read -r branch; do
            if [[ $branch == auto-commits-* ]]; then
              created_at=$(git log -1 --format=%cd --date=iso-strict origin/$branch)
              days_old=$(( ($(date +%s) - $(date -d "$created_at" +%s)) / 86400 ))
              
              if [[ $days_old -gt 7 ]]; then
                echo "Deleting branch $branch (${days_old} days old)"
                git push origin --delete "$branch"
              fi
            fi
          done
